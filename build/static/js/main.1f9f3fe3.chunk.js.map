{"version":3,"sources":["api/index.js","components/Header.js","auth/index.js","components/Routines.js","components/Activities.js","components/PublicRoutines.js","index.js"],"names":["BASE_URL","registerUser","username","password","a","fetch","method","headers","body","JSON","stringify","response","json","data","localStorage","setItem","token","loginUser","getPublicRoutinesByUserFrontEnd","fetchActivitiesFrontEnd","getAllPublicRoutinesFrontEnd","createRoutineFrontEnd","name","goal","isPublic","parse","getItem","console","log","Authorization","Header","currentUser","setCurrentUser","useState","setUsername","setPassword","setApiMessage","formButton","setFormButton","handleSubmit","event","preventDefault","handleUserLogout","result","hanldeLoginAndRegister","removeItem","user","message","className","onSubmit","to","activeClassName","type","value","onClick","placeholder","onChange","e","target","Routines","userRoutines","show","setShow","newRoutine","setNewRoutine","handleClose","handleChange","prevNewRoutine","Button","variant","Modal","onHide","closeButton","Title","Body","Form","Group","controlId","Control","Check","label","Footer","length","map","id","creatorName","activities","description","duration","count","Activities","PublicRoutines","routines","App","setUserRoutines","setRoutines","setActivities","useEffect","then","catch","error","publicRoutines","path","exact","style","padding","ReactDOM","render","document","getElementById"],"mappings":"oSACMA,G,YAAW,4CAMJC,EAAY,uCAAG,WAAOC,EAAUC,GAAjB,iBAAAC,EAAA,+EAEGC,MAAM,GAAD,OAAIL,EAAJ,mBAA8B,CACtDM,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACfR,SAAUA,EACVC,SAAUA,MATA,cAEdQ,EAFc,gBAYAA,EAASC,OAZT,cAYdC,EAZc,OAapBC,aAAaC,QAAQ,QAASN,KAAKC,UAAUG,EAAKG,QAb9B,kBAcbH,GAda,uGAAH,wDAqBZI,EAAS,uCAAG,WAAOf,EAAUC,GAAjB,iBAAAC,EAAA,+EAEMC,MAAM,GAAD,OAAIL,EAAJ,gBAA2B,CACnDM,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBR,SAAUA,EACVC,SAAUA,MATD,cAEXQ,EAFW,gBAYEA,EAASC,OAZX,cAYXC,EAZW,OAcjBC,aAAaC,QAAQ,QAASN,KAAKC,UAAUG,EAAKG,QAdjC,kBAeVH,GAfU,uGAAH,wDA0CTK,EAA+B,uCAAG,WAAOhB,GAAP,iBAAAE,EAAA,+EAGhBC,MAAM,GAAD,OAAIL,EAAJ,kBAAsBE,EAAtB,aAA2C,CACrEK,QAAS,CACP,eAAgB,sBALmB,cAGjCI,EAHiC,gBAQpBA,EAASC,OARW,cAQjCC,EARiC,yBAUhCA,GAVgC,uGAAH,sDAkB/BM,EAAuB,uCAAG,8BAAAf,EAAA,+EAERC,MAAM,GAAD,OAAIL,EAAJ,eAA0B,CAClDO,QAAS,CACL,eAAgB,sBAJO,cAEzBI,EAFyB,gBAOXA,EAASC,OAPE,cAOxBC,EAPwB,yBAQxBA,GARwB,uGAAH,qDA4EvBO,EAA4B,uCAAG,8BAAAhB,EAAA,+EAEbC,MAAM,GAAD,OAAIL,EAAJ,aAAwB,CAChDO,QAAQ,CACJ,eAAgB,sBAJY,cAE9BI,EAF8B,gBAOjBA,EAASC,OAPQ,cAO9BC,EAP8B,yBAQ7BA,GAR6B,uGAAH,qDAe5BQ,EAAqB,uCAAG,uCAAAjB,EAAA,6DAAOkB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,SAAnB,SAEvBR,EAAQP,KAAKgB,MAAMX,aAAaY,QAAQ,UAC9CC,QAAQC,IAAI,SAAUZ,GAHO,SAKNX,MAAM,GAAD,OAAIL,EAAJ,aAAyB,CAC7CM,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChBsB,cAAc,UAAD,OAAYb,IAE7BR,KAAMC,KAAKC,UAAU,CACjBY,KAAMA,EACNC,KAAMA,EACNC,SAAUA,MAdO,cAKvBb,EALuB,gBAiBNA,EAASC,OAjBH,cAiBnBC,EAjBmB,yBAkBlBA,GAlBkB,uGAAH,sD,WC1GnBiB,EAnEA,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,eAE1B,EAAiCC,mBAAS,IAA1C,mBAAO/B,EAAP,KAAiBgC,EAAjB,KACA,EAAiCD,mBAAS,IAA1C,mBAAO9B,EAAP,KAAiBgC,EAAjB,KACA,EAAoCF,mBAAS,IAA7C,mBAAmBG,GAAnB,WACA,EAAoCH,qBAApC,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAAY,uCAAG,WAAMC,GAAN,iBAAApC,EAAA,yDAEjBoC,EAAMC,iBAGY,WAAfJ,EALc,yCAKkBK,KALlB,UAME,UAAfL,EANa,gCAQQpB,EAAUf,EAAUC,GAR5B,OAQPwC,EARO,OASbC,EAAuBD,GATV,UAWE,aAAfN,EAXa,2CAaYpC,EAAaC,EAAUC,GAbnC,QAaHwC,EAbG,OAcTC,EAAuBD,GAdd,kDAgBZhB,QAAQC,IAAR,MAhBY,0DAAH,sDAqBZc,EAAmB,WCxBzB5B,aAAa+B,WAAW,eD0BpBb,EAAe,OAGbY,EAAyB,SAACD,GCvC7B,IAA0BG,EDwCzBV,EAAcO,EAAOI,SCxCID,EDyCRH,EAAOG,KCxC5BhC,aAAaC,QAAQ,cAAeN,KAAKC,UAAUoC,IDyC/Cd,EAAeW,EAAOG,MACtBZ,EAAY,IACZC,EAAY,KAGpB,OACI,mCACI,4DACA,sBACIa,UAAU,cACVC,SAAUV,EAFd,SAIQR,EACF,qCACE,cAAC,IAAD,CAASmB,GAAG,cAAcC,gBAAgB,UAA1C,yBACA,cAAC,IAAD,CAASD,GAAG,kBAAkBC,gBAAgB,UAA9C,6BACA,cAAC,IAAD,CAASD,GAAG,cAAcC,gBAAgB,UAA1C,wBACA,yBAAQ7B,KAAK,SAAS8B,KAAK,SAASC,MAAM,SAASC,QAAU,WAAMhB,EAAc,WAAjF,sBAAyGP,EAAY7B,eAEvH,qCACE,uBAAOqD,YAAY,WAAWF,MAAOnD,EAAUsD,SAAU,SAACC,GAAKvB,EAAYuB,EAAEC,OAAOL,UACpF,uBACA,uBAAOE,YAAY,WAAWH,KAAK,WAAWC,MAAOlD,EAAUqD,SAAU,SAACC,GAAKtB,EAAYsB,EAAEC,OAAOL,UACpG,wBAAQ/B,KAAK,WAAW8B,KAAK,SAASC,MAAM,WAAWC,QAAS,WAAMhB,EAAc,aAApF,sBACA,wBAAQhB,KAAK,QAAQ8B,KAAK,SAASC,MAAM,QAAQC,QAAS,WAAMhB,EAAc,UAA9E,6B,wCEmDDqB,G,MA7GE,SAAC,GAAiC,IAAhC5B,EAA+B,EAA/BA,YAAa6B,EAAkB,EAAlBA,aAE5B,EAAwB3B,oBAAS,GAAjC,mBAAO4B,EAAP,KAAaC,EAAb,KACA,EAAoC7B,mBAAS,CAACX,KAAK,GAAIC,KAAK,GAAIC,UAAS,IAAzE,mBAAOuC,EAAP,KAAmBC,EAAnB,KACA,EAAoC/B,qBAApC,mBAAOI,EAAP,KAAmBC,EAAnB,KACAX,QAAQC,IAAIS,GAEZV,QAAQC,IAAImC,GAEZ,IAAME,EAAc,WAAOH,GAAQ,IAG7BI,EAAe,SAAC1B,GAElB,MAAwBA,EAAMkB,OAAtBpC,EAAR,EAAQA,KAAM+B,EAAd,EAAcA,MAEdW,GAAc,SAACG,GACX,kCACOA,GADP,kBAEC7C,EAAO+B,QAIVd,EAAY,uCAAG,WAAMC,GAAN,SAAApC,EAAA,yDACjBoC,EAAMC,iBACY,cAAfJ,IACC2B,EAAc,CAAC1C,KAAK,GAAIC,KAAK,GAAIC,UAAS,IAC1CG,QAAQC,IAAImC,IAEE,WAAf1B,EANc,0CAQYhB,EAAsB0C,GARlC,gEAUTpC,QAAQC,IAAR,MAVS,0DAAH,sDAgBlB,OACI,sBAAKoB,UAAU,WAAf,UACI,qCAAQjB,EAAY7B,SAApB,sCAAoE,cAACkE,EAAA,EAAD,CAAQC,QAAQ,UAAUf,QAAS,WAAMhB,EAAc,aA/B1GwB,GAAQ,IA+B2C,+BACpE,mCAEI,eAACQ,EAAA,EAAD,CAAOT,KAAMA,EAAMU,OAAQN,EAA3B,UACE,cAACK,EAAA,EAAMxC,OAAP,CAAc0C,aAAW,EAAzB,SACE,cAACF,EAAA,EAAMG,MAAP,4BAEF,uBAAMxB,SAAUV,EAAhB,UACA,eAAC+B,EAAA,EAAMI,KAAP,WAEI,cAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAAtB,SACE,cAACF,EAAA,EAAKG,QAAN,CAAc1B,KAAK,OAAO9B,KAAK,OAAOiC,YAAY,qBAAqBC,SAAUU,MAEnF,cAACS,EAAA,EAAKC,MAAN,CAAYC,UAAU,oBAAtB,SACE,cAACF,EAAA,EAAKG,QAAN,CAAc1B,KAAK,OAAO9B,KAAK,OAAOiC,YAAY,qBAAqBC,SAAUU,MAEnF,cAACS,EAAA,EAAKC,MAAN,CAAYC,UAAU,oBAAtB,SACE,cAACF,EAAA,EAAKI,MAAN,CAAY3B,KAAK,WAAW4B,MAAM,wBAYxC,eAACV,EAAA,EAAMW,OAAP,WACG,cAACb,EAAA,EAAD,CAAQC,QAAQ,YAAYjB,KAAK,SAASE,QAAS,WAAMhB,EAAc,SAAS2B,KAAhF,mBAGD,cAACG,EAAA,EAAD,CAAQC,QAAQ,UAAUjB,KAAK,SAASE,QAAS,WAAMhB,EAAc,UAAU2B,KAA/E,+BAQR,qDAAwBL,EAAasB,OAArC,gBAGItB,EAAauB,KAAI,gBAAEC,EAAF,EAAEA,GAAI9D,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,KAAM8D,EAAlB,EAAkBA,YAAaC,EAA/B,EAA+BA,WAA/B,OAEjB,sBAActC,UAAU,OAAxB,UACI,gDAAmB1B,KACnB,+CAAkBC,KAClB,+CAAkB8D,KAEdC,EAAWJ,OAAS,EAAI,qCACnBI,EAAWH,KAAI,gBAAEC,EAAF,EAAEA,GAAI9D,EAAN,EAAMA,KAAMiE,EAAZ,EAAYA,YAAaC,EAAzB,EAAyBA,SAAUC,EAAnC,EAAmCA,MAAnC,OACZ,sBAAczC,UAAU,aAAxB,UACI,oDAAuB1B,KACvB,uDAA0BiE,KAC1B,2CAAcC,KACd,wCAAWC,OAJLL,MAFM,OAStB,yCAAG,2CAAcE,EAAWJ,OAAzB,iBAAH,SAdAE,WC5EXM,G,MAhBI,SAAC,GAA+B,IAA9B3D,EAA6B,EAA7BA,YAAauD,EAAgB,EAAhBA,WAC9B,OACI,sBAAKtC,UAAU,aAAf,UACI,qCAAQjB,EAAY7B,SAApB,+BACA,qDAAwBoF,EAAWJ,OAAnC,kBAEII,EAAWH,KAAI,gBAAEC,EAAF,EAAEA,GAAI9D,EAAN,EAAMA,KAAMiE,EAAZ,EAAYA,YAAZ,OACf,sBAAcvC,UAAU,OAAxB,UACI,iDAAoB1B,KACpB,8CAAiBiE,OAFXH,WCmBXO,G,MA1BQ,SAAC,GAA6B,IAA5B5D,EAA2B,EAA3BA,YAAa6D,EAAc,EAAdA,SAClC,OACI,sBAAK5C,UAAU,iBAAf,UACI,qCAAQjB,EAAY7B,SAApB,0DACA,qDAAwB0F,EAASV,OAAjC,uBAGIU,EAAST,KAAI,gBAAEC,EAAF,EAAEA,GAAI9D,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,KAAM8D,EAAlB,EAAkBA,YAAaC,EAA/B,EAA+BA,WAA/B,OACb,sBAActC,UAAU,OAAxB,UACI,gDAAmB1B,KACnB,+CAAkBC,KAClB,+CAAkB8D,KAEjBC,EAAWH,KAAI,gBAAEC,EAAF,EAAEA,GAAI9D,EAAN,EAAMA,KAAMiE,EAAZ,EAAYA,YAAaC,EAAzB,EAAyBA,SAAUC,EAAnC,EAAmCA,MAAnC,OACZ,sBAAczC,UAAU,aAAxB,UACI,oDAAuB1B,KACvB,uDAA0BiE,KAC1B,2CAAcC,KACd,wCAAWC,OAJLL,QANRA,WCDpBS,G,MAAM,WAER,MAAsC5D,mBAAS,IAA/C,mBAAOF,EAAP,KAAoBC,EAApB,KACA,EAAwCC,mBAAS,IAAjD,mBAAO2B,EAAP,KAAqBkC,EAArB,KACA,EAAgC7D,mBAAS,IAAzC,mBAAO2D,EAAP,KAAiBG,EAAjB,KACA,EAAmC9D,mBAAS,IAA5C,mBAAOqD,EAAP,KAAmBU,EAAnB,KAoCA,OAhCAC,qBAAU,WACN,IAAIlE,EAAuE,OAAzD+D,EAAgB,IAAKC,EAAY,SAAKC,EAAc,IAEtE9E,EAAgCa,EAAY7B,UACvCgG,MAAK,SAACN,GACHjE,QAAQC,IAAI,YAAagE,GACzBE,EAAgBF,MAEnBO,OAAM,SAACC,GACJzE,QAAQC,IAAIwE,MAGpBjF,IACK+E,MAAK,SAACZ,GACL3D,QAAQC,IAAI,cAAe0D,GAC3BU,EAAcV,MAEfa,OAAM,SAACC,GACNzE,QAAQC,IAAIwE,MAGlBhF,IACK8E,MAAK,SAACG,GACH1E,QAAQC,IAAI,kBAAmByE,GAC/BN,EAAYM,MAEfF,OAAM,SAACC,GACJzE,QAAQC,IAAIwE,QAGrB,CAACrE,IAGA,cAAC,IAAD,UACI,sBAAKqD,GAAG,MAAR,UACI,cAAC,EAAD,CAAQrD,YAAaA,EAAaC,eAAgBA,IAE9CD,EAAc,mCACV,eAAC,IAAD,WACI,cAAC,IAAD,CAAOuE,KAAK,cAAZ,SACI,cAAC,EAAD,CAAUvE,YAAaA,EAAa6B,aAAcA,MAEtD,cAAC,IAAD,CAAO0C,KAAK,kBAAZ,SACI,cAAC,EAAD,CAAgBvE,YAAaA,EAAa6D,SAAUA,MAExD,cAAC,IAAD,CAAOU,KAAK,cAAZ,SACI,cAAC,EAAD,CAAYvE,YAAaA,EAAauD,WAAYA,MAEtD,cAAC,IAAD,CAAOiB,OAAK,EAACD,KAAK,IAAlB,SACI,qBAAIE,MAAO,CAACC,QAAS,QAArB,sBAAyC1E,EAAY7B,SAArD,SAEA,cAAC,IAAD,CAAUgD,GAAG,WAEvB,mCACF,eAAC,IAAD,WACI,cAAC,IAAD,CAAOqD,OAAK,EAACD,KAAK,IAAlB,SACA,oBAAIE,MAAO,CAAEC,QAAS,QAAtB,iDAEA,cAAC,IAAD,CAAUvD,GAAG,kBASrCwD,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.1f9f3fe3.chunk.js","sourcesContent":["import axios from \"axios\";\nconst BASE_URL = \"https://fitnesstrac-kr.herokuapp.com/api\"\n//https://fitnesstrac-kr.herokuapp.com/api\n//https://glacial-bayou-64478.herokuapp.com/api\n\n//USERS\n// Register a new User\nexport const registerUser = async (username, password) => {\n    try{\n        const response = await fetch(`${BASE_URL}/users/register`,{\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ \n                  username: username,\n                  password: password,\n            }),\n        });\n        const data  = await response.json();\n        localStorage.setItem(\"token\", JSON.stringify(data.token));\n        return data;\n    }catch(error){\n        throw error\n    }\n}\n\n//Login a new User\nexport const loginUser = async (username, password) => {\n    try{\n        const response = await fetch(`${BASE_URL}/users/login`,{\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                username: username,\n                password: password,\n            })\n        });\n        const data = await response.json();\n\n        localStorage.setItem('token', JSON.stringify(data.token));\n        return data\n    }catch(error){\n        throw error\n    }\n}\n\n// /user/me\nexport const me = async () => {\n    const token  = localStorage.getItem(\"token\")\n\n    if(!token) return;\n\n    try{\n        const response = await fetch(`${BASE_URL}/users/me`,{\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n              },   \n        });\n        const data = await response.json();\n        return data\n    }catch(error){\n        throw error\n    }\n}\n\n// GET /:username/routines\nexport const getPublicRoutinesByUserFrontEnd = async (username) => {\n  \n    try {\n        const response = await fetch(`${BASE_URL}/users/${username}/routines`, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n        const data = await response.json();\n    \n        return data;\n      } catch (error) {\n        throw error;\n      }\n}\n\n//ACTIVITIES\n// GET /api/activities\nexport const fetchActivitiesFrontEnd = async ( ) => {\n    try{\n        const response = await fetch(`${BASE_URL}/activities`,{\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n         const data = await response.json();\n        return data;\n    }catch(error){\n         throw error;\n    }    \n}   \n\n\n// POST /api/activities\nexport const createActivityFrontEnd = async (name, description) => {\n    try{\n        const token = localStorage.getItem(\"token\");\n        if(!token) return\n        const response = await fetch(`${BASE_URL}/activities`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${token}`,\n                },\n                body: JSON.stringify({\n                    name: name,\n                    description: description,\n                })\n            });\n            const data = await response.json();\n            return data\n    }catch(error){\n        throw error\n    }\n}\n\n// PATCH /:activityId\nexport const updateActivityFronEnd = async(activityID, name, description) => {\n    try{\n        const token = localStorage.getItem(\"token\");\n        if(!token) return   \n        const response = await fetch(`${BASE_URL}/activities/${activityID}`,{\n            method: \"PATCH\",\n            body:JSON.stringify({\n                name: name,\n                description: description\n            })\n        });\n        const data = await response.json();\n        return data    \n    }catch(error){\n        throw error\n    }\n\n}\n\n\n// GET /:activityId/routines\nexport const getPublicRoutinesByActivityFrontEnd = async (activityID)=> {\n    try{\n        const response = await fetch(`${BASE_URL}/activities/${activityID}/routines`,{\n            headers:{\n                'Content-Type': 'application/json'\n            }\n        });\n        const data = await response.json();\n        return data\n    }catch(error){\n        throw error\n    }\n}\n\n// ROUTINES\n// GET /api/routines\nexport const getAllPublicRoutinesFrontEnd = async () => {\n    try{\n        const response = await fetch(`${BASE_URL}/routines`,{\n            headers:{\n                'Content-Type': 'application/json'\n            }\n        });\n        const data = await response.json();\n        return data;\n    }catch(error){\n        throw error;\n    }    \n}\n\n// POST /api/routines\nexport const createRoutineFrontEnd = async({name, goal, isPublic}) => {\n    try{\n        const token = JSON.parse(localStorage.getItem(\"token\"));\n        console.log(\"token:\", token)\n        // if(!token) return\n        const response = await fetch(`${BASE_URL}/routines`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${token}`,\n                },\n                body: JSON.stringify({\n                    name: name,\n                    goal: goal,\n                    isPublic: isPublic\n                })\n            });\n            const data = await response.json();\n            return data\n    }catch(error){\n        throw error\n    }\n}\n\n// PATCH /api/routines/:routineId\nexport const updateRoutineFrontEnd = async (routineId, name, goal, isPublic) => {\n    try{\n        const token = localStorage.getItem(\"token\");\n        if(!token) return;\n        const response = await fetch(`${BASE_URL}/routines/${routineId}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n            },\n            body: JSON.stringify({\n                name: name,\n                goal: goal,\n                isPublic: isPublic\n            })\n        });\n        const data = await response.json()\n        return data;\n    }catch(error){\n        throw error\n    }\n}\n\n// DELETE /api/routines/:routineId\nexport const deleteRoutineFrontEnd = async (routineId) => {\n    try{\n        const token = localStorage.getItem(\"token\");\n        if(!token) return;\n        const response = await fetch(`${BASE_URL}/routines/${routineId}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n            },\n        });\n        const data = await response.json()\n        return data;\n    }catch(error){\n        throw error\n    }\n}\n\n// POST /api/routines/:routineId/activities\n\nexport const addActivityToRoutineFronEnd = async(routineId,  activityId, duration, count) => {\n    try{\n        const response = await fetch(`${BASE_URL}/routines/${routineId}/activities`,{\n            method: \"POST\",\n            body: JSON.stringify({\n                activityId: activityId,\n                duration: duration,\n                count: count \n              })\n        });\n        const data = await response.json()\n        return data;\n    }catch(error){\n        throw error\n    }\n}\n\n//ROUTINE_ACTIVITIES\n//PATCH /api/routine_activities/:routineActivityId\n\nexport const updateRoutineActivityFrontEnd = async(routineActivityId, count, duration) =>{\n    try{\n        const token = localStorage.getItem(\"token\");\n        if(!token) return;\n        const response = await fetch(`${BASE_URL}/routine_activities/${routineActivityId}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n            },\n            body: JSON.stringify({\n                count: count,\n                duration: duration,\n            })\n        });\n            const data = await response.json()\n            return data;\n    }catch(error){\n        throw error\n    }\n}\n\n//DELETE /api/routine_activities/:routineActivityId\n\nexport const deleteRoutineActivityFrontEnd = async(routineActivityId) =>{\n    try{\n        const token = localStorage.getItem(\"token\");\n        if(!token) return;\n        const response = await fetch(`${BASE_URL}/routine_activities/${routineActivityId}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n            },\n        });\n            const data = await response.json()\n            return data;\n    }catch(error){\n        throw error\n    }\n}","import React, {useState} from 'react';\nimport \"./Header.css\";\nimport {registerUser, loginUser} from '../api';\nimport { NavLink } from 'react-router-dom';\nimport {storeCurrentUser, clearCurrentUser} from '../auth'\n\nconst Header = ({currentUser, setCurrentUser}) => {\n    \n    const [username, setUsername]  = useState('');\n    const [password, setPassword]  = useState('');\n    const [apiMessage, setApiMessage] = useState('');\n    const [formButton, setFormButton] = useState();\n\n    const handleSubmit = async(event) =>{\n        \n        event.preventDefault();\n        \n        \n        if(formButton === 'logout') return handleUserLogout()\n        if (formButton === \"login\" ){\n            \n            const result = await loginUser(username, password)\n            hanldeLoginAndRegister(result)  \n        }\n        if (formButton === \"register\" ){\n           try{\n                const result = await registerUser(username, password)\n                hanldeLoginAndRegister(result)  \n           }catch(error){\n             console.log(error);\n           }   \n        }\n    }\n\n    const handleUserLogout = () => {\n        clearCurrentUser();\n        setCurrentUser(null);\n    }\n\n    const hanldeLoginAndRegister = (result) => {\n        setApiMessage(result.message);\n        storeCurrentUser(result.user); \n        setCurrentUser(result.user);\n        setUsername('')\n        setPassword('')\n    }\n\nreturn (\n    <header>\n        <h1>Welcome to Fitness Tracker</h1>\n        <form \n            className=\"user-select\" \n            onSubmit={handleSubmit}>\n            {\n                currentUser\n            ? <>\n                <NavLink to=\"/myroutines\" activeClassName=\"current\">My Routines</NavLink>\n                <NavLink to=\"/publicroutines\" activeClassName=\"current\">Public Routines</NavLink>\n                <NavLink to=\"/activities\" activeClassName=\"current\">Activities</NavLink>\n                <button name=\"logout\" type=\"submit\" value=\"logout\" onClick={ () =>{setFormButton('logout')} }>LOG OUT, { currentUser.username }</button>\n              </>\n            : <>\n                <input placeholder=\"username\" value={username} onChange={(e)=>{setUsername(e.target.value)}}></input>\n                <br/>\n                <input placeholder=\"password\" type=\"password\" value={password} onChange={(e)=>{setPassword(e.target.value)}}></input>\n                <button name=\"register\" type=\"submit\" value=\"register\" onClick={() =>{setFormButton('register')}}>REGISTER</button>\n                <button name=\"login\" type=\"submit\" value=\"login\" onClick={() =>{setFormButton('login')}}>LOG IN</button>\n             </>        \n            }\n        </form>\n    </header>\n);\n}\nexport default Header;","export function storeCurrentUser(user) {\n    localStorage.setItem('currentUser', JSON.stringify(user));\n}\n  \n  export function getCurrentUser() {\n    const user = JSON.parse(localStorage.getItem('currentUser'));\n     return user;\n}\n\n  export function clearCurrentUser() {\n    localStorage.removeItem('currentUser');\n}\n  ","import React, {useState} from \"react\";\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport {createRoutineFrontEnd} from '../api';\n\nimport \"./Routines.css\";\n\nconst Routines = ({currentUser, userRoutines}) => {\n\n    const [show, setShow] = useState(false);\n    const [newRoutine, setNewRoutine] = useState({name:\"\", goal:\"\", isPublic:true})\n    const [formButton, setFormButton] = useState();\n    console.log(formButton)\n\n    console.log(newRoutine)\n\n    const handleClose = () => {setShow(false);}\n    const handleShow = () => setShow(true);\n\n    const handleChange = (event) => {\n\n        const { name, value } = event.target;\n\n        setNewRoutine((prevNewRoutine)=>{\n            return{\n                ...prevNewRoutine,\n            [name]: value\n        }})\n    }\n\n    const handleSubmit = async(event) => {\n        event.preventDefault()\n        if(formButton === 'openModal') { \n            setNewRoutine({name:\"\", goal:\"\", isPublic:true})\n            console.log(newRoutine)\n        };\n        if(formButton === 'create'){\n            try{\n                const result = await createRoutineFrontEnd(newRoutine)\n            }catch(error){\n                console.log(error);\n            }\n        }\n        \n    }\n\n    return( \n        <div className=\"routines\">\n            <h2>Hi {currentUser.username}, Here are your Routines &nbsp;|&nbsp; <Button variant=\"primary\" onClick={() =>{setFormButton('openModal');handleShow()}}>Create Routine</Button></h2>\n            <>\n            \n                <Modal show={show} onHide={handleClose}>\n                  <Modal.Header closeButton>\n                    <Modal.Title>New Routine</Modal.Title>\n                  </Modal.Header>\n                  <form onSubmit={handleSubmit}>\n                  <Modal.Body>\n                  \n                      <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Control type=\"text\" name=\"name\" placeholder=\"Enter routine name\" onChange={handleChange} />\n                      </Form.Group>\n                      <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Control type=\"text\" name=\"goal\" placeholder=\"Enter routine goal\" onChange={handleChange} />\n                      </Form.Group>\n                      <Form.Group controlId=\"formBasicCheckbox\">\n                        <Form.Check type=\"checkbox\" label=\"Routine Public\" />\n                      </Form.Group>\n                      {/* <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                      </Button> */}\n                   \n                            {/* <Form.Control type=\"text\" name=\"name\" placeholder=\"Enter routine name\" onChange={handleChange}/>\n                            <br/>\n                            <Form.Control type=\"text\" name=\"goal\" placeholder=\"Enter routine goal\" onChange={handleChange}/> */}\n                       \n                  </Modal.Body>\n                  \n                  <Modal.Footer>\n                     <Button variant=\"secondary\" type=\"submit\" onClick={() =>{setFormButton('close');handleClose()}}>\n                      Close\n                    </Button>\n                    <Button variant=\"primary\" type=\"submit\" onClick={() =>{setFormButton('create');handleClose()}}>\n                      Create\n                    </Button> \n                  </Modal.Footer>\n                  </form>\n                </Modal>\n                \n            </>\n            <p>There is a total of {userRoutines.length} routines.</p>\n            \n            {\n                userRoutines.map(({id, name, goal, creatorName, activities}) =>(\n                    \n                <div key={id} className=\"post\">\n                    <h3>Routine Name: {name}</h3>\n                    <p>Routine Goal: {goal}</p>\n                    <p>Creator Name: {creatorName}</p>\n                    {\n                        activities.length > 0 ? <>\n                            {activities.map(({id, name, description, duration, count})=> (\n                                <div key={id} className=\"activities\">\n                                    <h3>Routine Activity: {name}</h3>\n                                    <p>Activity Description: {description}</p>\n                                    <p>Duration: {duration}</p>\n                                    <p>Count: {count}</p>\n                                </div>\n                            ))} </>\n                        : <> <p>There are {activities.length} Activities</p> </>\n                    }                \n                </div>  \n                ))}\n        </div>\n\n    );\n}\nexport default Routines;","import React from \"react\";\nimport \"./Activities.css\";\n\nconst Activities = ({currentUser, activities}) => {\n    return( \n        <div className=\"activities\">\n            <h2>Hi {currentUser.username}, Here are all activities</h2>\n            <p>There is a total of {activities.length} activities.</p>\n            {\n                activities.map(({id, name, description}) =>(\n                <div key={id} className=\"post\">\n                    <h3>Activity Name: {name}</h3>\n                    <p>Description: {description}</p>\n                </div>  \n                ))}\n        </div>\n    );\n}\n\nexport default Activities;","import React from 'react';\nimport './PublicRoutines.css';\n\nconst PublicRoutines = ({currentUser, routines}) => {\n    return( \n        <div className=\"publicroutines\">\n            <h2>Hi {currentUser.username}, Here are all public routines with their activities</h2>\n            <p>There is a total of {routines.length} public routines.</p>\n\n            {\n                routines.map(({id, name, goal, creatorName, activities}) =>(\n                <div key={id} className=\"post\">\n                    <h3>Routine Name: {name}</h3>\n                    <p>Routine Goal: {goal}</p>\n                    <p>Creator Name: {creatorName}</p>\n                    \n                    {activities.map(({id, name, description, duration, count})=> (\n                        <div key={id} className=\"activities\">\n                            <h3>Routine Activity: {name}</h3>\n                            <p>Activity Description: {description}</p>\n                            <p>Duration: {duration}</p>\n                            <p>Count: {count}</p>\n                        </div>\n                    ))}\n                </div>  \n                ))}\n        </div>\n    );\n}\nexport default PublicRoutines;","import { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\nimport { Header, Routines, Activities, PublicRoutines, CreateForm } from \"./components\";\nimport {getCurrentUser} from './auth';//\nimport {getPublicRoutinesByUserFrontEnd, fetchActivitiesFrontEnd, getAllPublicRoutinesFrontEnd} from './api'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nconst App = () => {\n\n    const [currentUser, setCurrentUser] = useState(\"\");\n    const [userRoutines, setUserRoutines] = useState([]);\n    const [routines, setRoutines] = useState([]);\n    const [activities, setActivities]= useState([]);\n\n    \n\n    useEffect(()=> {\n        if(!currentUser) {setUserRoutines([]); setRoutines([]); setActivities([]); return;}\n\n        getPublicRoutinesByUserFrontEnd(currentUser.username)\n            .then((routines)=>{\n                console.log(\"routines:\", routines);\n                setUserRoutines(routines)\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        \n        fetchActivitiesFrontEnd()\n            .then((activities)=>{\n              console.log(\"activities:\", activities);\n              setActivities(activities) \n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        \n        getAllPublicRoutinesFrontEnd()\n            .then((publicRoutines)=>{\n                console.log(\"publicRoutines:\", publicRoutines);\n                setRoutines(publicRoutines) \n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        \n    }, [currentUser]);\n\n    return(\n        <Router> \n            <div id=\"App\">\n                <Header currentUser={currentUser} setCurrentUser={setCurrentUser}/>\n                {\n                    currentUser ? <>\n                        <Switch>\n                            <Route path=\"/myroutines\">\n                                <Routines currentUser={currentUser} userRoutines={userRoutines}/>\n                            </Route>\n                            <Route path=\"/publicroutines\">\n                                <PublicRoutines currentUser={currentUser} routines={routines}/>\n                            </Route>\n                            <Route path=\"/activities\">\n                                <Activities currentUser={currentUser} activities={activities}  />\n                            </Route>\n                            <Route exact path=\"/\">\n                                <h2 style={{padding: \".5em\"}}>Welcome, { currentUser.username }!</h2>\n                             </Route>\n                                <Redirect to=\"/\" />\n                        </Switch>\n                </> : <>\n                    <Switch>\n                        <Route exact path=\"/\">\n                        <h2 style={{ padding: \".5em\" }}>Please register or log in, above.</h2>\n                        </Route>\n                        <Redirect to=\"/\" />\n                    </Switch>\n                    </>\n                }\n            </div>\n        </Router>    \n    );\n}\n\nReactDOM.render(<App/>,  document.getElementById(\"app\"));"],"sourceRoot":""}